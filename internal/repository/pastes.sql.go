// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pastes.sql

package repository

import (
	"context"
)

const createPaste = `-- name: CreatePaste :exec
INSERT INTO pastes (
    file_id, file_content
) VALUES ($1, $2)
`

type CreatePasteParams struct {
	FileID      string `json:"file_id"`
	FileContent []byte `json:"file_content"`
}

func (q *Queries) CreatePaste(ctx context.Context, arg CreatePasteParams) error {
	_, err := q.db.Exec(ctx, createPaste, arg.FileID, arg.FileContent)
	return err
}

const getPaste = `-- name: GetPaste :one
SELECT id, file_id, file_content, created_at FROM pastes WHERE file_id = $1 LIMIT 1
`

func (q *Queries) GetPaste(ctx context.Context, fileID string) (Paste, error) {
	row := q.db.QueryRow(ctx, getPaste, fileID)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.FileContent,
		&i.CreatedAt,
	)
	return i, err
}

const getPastes = `-- name: GetPastes :many
SELECT id, file_id, file_content, created_at FROM pastes
`

func (q *Queries) GetPastes(ctx context.Context) ([]Paste, error) {
	rows, err := q.db.Query(ctx, getPastes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Paste
	for rows.Next() {
		var i Paste
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.FileContent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
